basePath: /
definitions:
  handler.loginRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  handler.loginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJyb2xlIjoidXNlciIsImV4cCI6MTYzNTQ5NjAwMH0.example
        type: string
    type: object
  handler.registerRequest:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      username:
        example: john_doe
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.Film:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        example: Sci-fi action movie about virtual reality
        type: string
      id:
        example: 1
        type: integer
      rating:
        example: 8.7
        type: number
      release_date:
        example: "1999-03-31T00:00:00Z"
        type: string
      title:
        example: The Matrix
        type: string
    required:
    - description
    - title
    type: object
  models.FilmRequest:
    properties:
      description:
        example: Sci-fi action movie about virtual reality
        type: string
      release_date:
        example: "1999-03-31T00:00:00Z"
        type: string
      title:
        example: The Matrix
        type: string
    required:
    - description
    - title
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API для управления фильмами и пользователями
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: FilmHub API
  version: "1.0"
paths:
  /films:
    get:
      consumes:
      - application/json
      description: Ищет фильмы по названию или описанию
      parameters:
      - description: Поисковый запрос
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Список найденных фильмов
          schema:
            items:
              $ref: '#/definitions/models.Film'
            type: array
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties: true
            type: object
      summary: Поиск фильмов
      tags:
      - films
    post:
      consumes:
      - application/json
      description: Создает новый фильм (требует авторизации)
      parameters:
      - description: Данные фильма
        in: body
        name: film
        required: true
        schema:
          $ref: '#/definitions/models.FilmRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Фильм успешно создан
          schema:
            $ref: '#/definitions/models.Film'
        "400":
          description: Ошибка валидации
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Не авторизован
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Создание фильма
      tags:
      - films
  /films/{id}:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о фильме по его ID
      parameters:
      - description: ID фильма
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Информация о фильме
          schema:
            $ref: '#/definitions/models.Film'
        "400":
          description: Неверный ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Фильм не найден
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties: true
            type: object
      summary: Получение фильма по ID
      tags:
      - films
  /login:
    post:
      consumes:
      - application/json
      description: Авторизует пользователя и возвращает JWT токен
      parameters:
      - description: Данные для входа
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handler.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная авторизация
          schema:
            $ref: '#/definitions/handler.loginResponse'
        "400":
          description: Ошибка валидации
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Неверные учетные данные
          schema:
            additionalProperties: true
            type: object
      summary: Авторизация пользователя
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя в системе
      parameters:
      - description: Данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.registerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно зарегистрирован
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Ошибка валидации
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties: true
            type: object
      summary: Регистрация пользователя
      tags:
      - auth
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Введите "Bearer" + пробел + JWT токен
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
