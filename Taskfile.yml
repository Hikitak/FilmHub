version: '3'

tasks:
  default:
    desc: Запуск FilmHub (полный стек)
    cmds:
      - task: dev:start

  # Основные команды разработки
  build:
    desc: Сборка бинарника Go
    echo: "- Build"
    cmds:
      - docker run --rm -v ${PWD}:/app -w /app golang:1.24.1-alpine go build -o filmhub ./cmd/main.go
  run:
    desc: Запуск приложения локально (требует Postgres)
    echo: "- Run"
    cmds:
      - docker run --rm -v ${PWD}:/app -w /app --env-file .env --network host golang:1.24.1-alpine go run ./cmd/main.go
  vendor:
    desc: Обновить vendor
    echo: "- Vendor"
    cmds:
      - docker run --rm -v ${PWD}:/app -w /app golang:1.24.1-alpine go mod vendor
  tidy:
    desc: Обновить зависимости
    echo: "- Tidy"
    cmds:
      - docker run --rm -v ${PWD}:/app -w /app golang:1.24.1-alpine go mod tidy
  lint:
    desc: Запуск линтера
    echo: "- Lint"
    cmds:
      - docker run --rm -v ${PWD}:/app -w /app golangci/golangci-lint:v1.57.2-alpine golangci-lint run --fix -c .golangci.yaml
  fmt:
    desc: Форматирование кода
    echo: "- Format"
    cmds:
      - docker run --rm -v ${PWD}:/app -w /app golang:1.24.1-alpine go fmt ./...

  # Docker команды
  docker:build:
    desc: Сборка Docker-образа
    cmds:
      - docker build -t filmhub .
  docker:run:
    desc: Запуск Docker-контейнера (требует внешнюю БД)
    cmds:
      - docker run -p 8080:8080 --env-file .env filmhub
  docker:run:detached:
    desc: Запуск Docker-контейнера в фоне
    cmds:
      - docker run -d -p 8080:8080 --env-file .env --name filmhub-app filmhub
  docker:stop:
    desc: Остановка Docker-контейнера
    cmds:
      - docker stop filmhub-app || true
      - docker rm filmhub-app || true
  docker:logs:
    desc: Просмотр логов Docker-контейнера
    cmds:
      - docker logs -f filmhub-app
  docker:shell:
    desc: Вход в Docker-контейнер
    cmds:
      - docker exec -it filmhub-app sh

  # Docker Compose команды (полный стек)
  docker:up:
    desc: Запуск полного стека (приложение + Postgres)
    cmds:
      - docker compose -f docker-composer.yml up --build
  docker:up:detached:
    desc: Запуск полного стека в фоне
    cmds:
      - docker compose -f docker-composer.yml up -d --build
  docker:down:
    desc: Остановка полного стека
    cmds:
      - docker compose -f docker-composer.yml down
  docker:clean:
    desc: Очистка Docker-образов и контейнеров
    cmds:
      - docker system prune -f
      - docker image prune -f

  # Удобные команды для разработки
  dev:setup:
    desc: Полная настройка проекта (сборка + запуск стека)
    cmds:
      - task docker:build
      - task docker:up:detached
  dev:start:
    desc: Быстрый старт для разработки
    cmds:
      - task docker:up:detached
      - echo "FilmHub запущен на http://localhost:8080"
      - echo "Swagger UI доступен на http://localhost:8080/swagger/index.html"
  dev:stop:
    desc: Остановка всех сервисов
    cmds:
      - task docker:down
      - task docker:stop
      - echo "Все сервисы остановлены"